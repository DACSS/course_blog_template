[
  {
    "path": "posts/2021-04-07-example/",
    "title": "Example",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Hans",
        "url": {}
      }
    ],
    "date": "2021-04-07",
    "categories": [
      "example"
    ],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\nplot(AP,xlab=\"Date\", ylab = \"Passenger numbers (1000's)\",main=\"Air Passenger numbers from 1949 to 1961\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-04-07-example/example_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-04-07T16:58:10-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/hw-4-making-a-chart/",
    "title": "HW 4: Making A Chart",
    "description": "My homework 4 creates a charts",
    "author": [
      {
        "name": "Alexander Hong",
        "url": {}
      }
    ],
    "date": "2021-04-07",
    "categories": [
      "homework 4",
      "graph",
      "alex hong"
    ],
    "contents": "\nWhat’s intended to be shown on the chart is to illustrate the mean response times for those that accepted and declined their requests, based on gender and personnel type. If I had time references, perhaps I could use some sort of line plot to plot the mean response rates over time.\nAs for other chart types, maybe some box / violin plots sliced by the conditions mentioned could be an option, especially if I care about skew and response time spreads.\n\n\nlibrary(ggplot2)\ndg_plot <- ggplot(pers_req1, aes(x=gender, y=dec_time, fill = pers_type), ) + \n                  geom_bar(stat = \"summary\", fun = \"mean\", position = \"dodge2\") +\n                  theme_bw() +\n                  labs(title = \"Average Decision Time To Accept or Decline by Gender and Personnel Type\") +\n                  xlab(\"Gender\") +\n                  ylab(\"Mean Decision Time in Hours\")\ndg_plot <- dg_plot + facet_wrap(~decision)\n\ndg_plot <- dg_plot + coord_cartesian(ylim = c(0, 6))\n\nreturn(dg_plot)\n\n\n\n\n\n\n\n",
    "preview": "posts/hw-4-making-a-chart/distill-preview.png",
    "last_modified": "2021-04-07T16:58:10-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/sullivan-hw4/",
    "title": "HW 4: Weather Data",
    "description": "My homework 4 using weather data and contianing images.",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2021-04-07",
    "categories": [],
    "contents": "\nData Description\nThis data set was found on Kagle.com. This data has 23 variables and 145,000 measurements. This data set has 10 years of daily weather observations from various locations in Australia. The data was published with the intent of using various weather indicators to predict whether it is raining or will rain the next day.Two columns, rain today and rain tomorrow are used as the target columns. If there was 1mm or more of rain, then that will count as “Yes”, meaning there was rain that day.\nBefore I start plotting, lets take a look at the variables we are working with. To do this, I will use the str function, sapply with sum is.na, and length with unique to count the locations.\n\n\nWeather_Data <- read_csv(\"weatherAUS.csv\", na = c(\"\", \"NA\"))\nknitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)\nstr(Weather_Data)\n\n\nspec_tbl_df [145,460 × 23] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date         : Date[1:145460], format: \"2008-12-01\" ...\n $ Location     : chr [1:145460] \"Albury\" \"Albury\" \"Albury\" \"Albury\" ...\n $ MinTemp      : num [1:145460] 13.4 7.4 12.9 9.2 17.5 14.6 14.3 7.7 9.7 13.1 ...\n $ MaxTemp      : num [1:145460] 22.9 25.1 25.7 28 32.3 29.7 25 26.7 31.9 30.1 ...\n $ Rainfall     : num [1:145460] 0.6 0 0 0 1 0.2 0 0 0 1.4 ...\n $ Evaporation  : logi [1:145460] NA NA NA NA NA NA ...\n $ Sunshine     : logi [1:145460] NA NA NA NA NA NA ...\n $ WindGustDir  : chr [1:145460] \"W\" \"WNW\" \"WSW\" \"NE\" ...\n $ WindGustSpeed: num [1:145460] 44 44 46 24 41 56 50 35 80 28 ...\n $ WindDir9am   : chr [1:145460] \"W\" \"NNW\" \"W\" \"SE\" ...\n $ WindDir3pm   : chr [1:145460] \"WNW\" \"WSW\" \"WSW\" \"E\" ...\n $ WindSpeed9am : num [1:145460] 20 4 19 11 7 19 20 6 7 15 ...\n $ WindSpeed3pm : num [1:145460] 24 22 26 9 20 24 24 17 28 11 ...\n $ Humidity9am  : num [1:145460] 71 44 38 45 82 55 49 48 42 58 ...\n $ Humidity3pm  : num [1:145460] 22 25 30 16 33 23 19 19 9 27 ...\n $ Pressure9am  : num [1:145460] 1008 1011 1008 1018 1011 ...\n $ Pressure3pm  : num [1:145460] 1007 1008 1009 1013 1006 ...\n $ Cloud9am     : num [1:145460] 8 NA NA NA 7 NA 1 NA NA NA ...\n $ Cloud3pm     : num [1:145460] NA NA 2 NA 8 NA NA NA NA NA ...\n $ Temp9am      : num [1:145460] 16.9 17.2 21 18.1 17.8 20.6 18.1 16.3 18.3 20.1 ...\n $ Temp3pm      : num [1:145460] 21.8 24.3 23.2 26.5 29.7 28.9 24.6 25.5 30.2 28.2 ...\n $ RainToday    : chr [1:145460] \"No\" \"No\" \"No\" \"No\" ...\n $ RainTomorrow : chr [1:145460] \"No\" \"No\" \"No\" \"No\" ...\n - attr(*, \"problems\")= tibble [153,782 × 5] (S3: tbl_df/tbl/data.frame)\n  ..$ row     : int [1:153782] 6050 6050 6051 6051 6052 6052 6053 6053 6054 6054 ...\n  ..$ col     : chr [1:153782] \"Evaporation\" \"Sunshine\" \"Evaporation\" \"Sunshine\" ...\n  ..$ expected: chr [1:153782] \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" ...\n  ..$ actual  : chr [1:153782] \"12\" \"12.3\" \"14.8\" \"13\" ...\n  ..$ file    : chr [1:153782] \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_date(format = \"\"),\n  ..   Location = col_character(),\n  ..   MinTemp = col_double(),\n  ..   MaxTemp = col_double(),\n  ..   Rainfall = col_double(),\n  ..   Evaporation = col_logical(),\n  ..   Sunshine = col_logical(),\n  ..   WindGustDir = col_character(),\n  ..   WindGustSpeed = col_double(),\n  ..   WindDir9am = col_character(),\n  ..   WindDir3pm = col_character(),\n  ..   WindSpeed9am = col_double(),\n  ..   WindSpeed3pm = col_double(),\n  ..   Humidity9am = col_double(),\n  ..   Humidity3pm = col_double(),\n  ..   Pressure9am = col_double(),\n  ..   Pressure3pm = col_double(),\n  ..   Cloud9am = col_double(),\n  ..   Cloud3pm = col_double(),\n  ..   Temp9am = col_double(),\n  ..   Temp3pm = col_double(),\n  ..   RainToday = col_character(),\n  ..   RainTomorrow = col_character()\n  .. )\n\ntable(Weather_Data$Location) %>% sort(decreasing = TRUE)\n\n\n\n        Canberra           Sydney         Adelaide         Brisbane \n            3436             3344             3193             3193 \n          Darwin           Hobart        Melbourne            Perth \n            3193             3193             3193             3193 \n          Albany           Albury     AliceSprings         Ballarat \n            3040             3040             3040             3040 \n         Bendigo           Cairns        GoldCoast       Launceston \n            3040             3040             3040             3040 \n    MountGambier      MountGinini       Townsville       Wollongong \n            3040             3040             3040             3040 \n       Newcastle          Penrith      Tuggeranong    BadgerysCreek \n            3039             3039             3039             3009 \n           Cobar     CoffsHarbour         Dartmoor MelbourneAirport \n            3009             3009             3009             3009 \n         Mildura            Moree    NorfolkIsland        Nuriootpa \n            3009             3009             3009             3009 \n      PearceRAAF     PerthAirport         Portland         Richmond \n            3009             3009             3009             3009 \n            Sale    SydneyAirport       WaggaWagga         Watsonia \n            3009             3009             3009             3009 \n     Williamtown      Witchcliffe          Woomera          Walpole \n            3009             3009             3009             3006 \n       NorahHead       SalmonGums        Katherine             Nhil \n            3004             3001             1578             1578 \n           Uluru \n            1578 \n\nsapply(Weather_Data, function(count) sum(is.na(count)))\n\n\n         Date      Location       MinTemp       MaxTemp      Rainfall \n            0             0          1485          1261          3261 \n  Evaporation      Sunshine   WindGustDir WindGustSpeed    WindDir9am \n       143636        142771         10326         10263         10566 \n   WindDir3pm  WindSpeed9am  WindSpeed3pm   Humidity9am   Humidity3pm \n         4228          1767          3062          2654          4507 \n  Pressure9am   Pressure3pm      Cloud9am      Cloud3pm       Temp9am \n        15065         15028         55888         59358          1767 \n      Temp3pm     RainToday  RainTomorrow \n         3609          3261          3267 \n\nlength(unique(Weather_Data$Location))\n\n\n[1] 49\n\nWeather_Data <- read_csv(\"weatherAUS.csv\", na = c(\"\", \"NA\"))\nknitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)\n\n\n\nResults:\nIt looks like we have a date column, a categorical column for locations, and continuous number type columns. It seems that the spread is pretty even for per location, With the largest amount of observations Canberra at 3436 and the lowest in Katherine, Nhil and Uluru at 1578. There are 49 cites in this data set. Also there are plenty of NA’s in this data set, so I’ll keep that in mind while thinking about which variables will help us predict rainfall in Australia. Due to the large amount of continuous variables, I will use histograms later on in the report.\nBefore we try the histograms, lets plot the top 10 cities by number of observations in a bar chart. \nVisuals\nHere are the top 10 cities based on rainfall: This time I will try to change the data set while piping directly into the plot.\n\n\nWeather_Data %>%\n  count(Location, sort = TRUE)%>%\n  slice(1:10)%>%\n  rename(Total_count = n)%>%\n  ggplot()+\n  geom_col(aes(x = Location, y =Total_count, fill = Location), show.legend = FALSE )+\n  geom_text(aes(x = Location, y =Total_count, label = Total_count), vjust = 3)+\n  theme_classic()+\n  labs(title = \"Rainfall Observations\")\n\n\n\n\nResults\nWell that wasn’t very helpful. Lets get the total rainfall for the top 10 citys! This can be done by using a groupby and arrange by decending. Also it should be noted that when plotting with geo_col, the columns will be alphabetically plotted on the x axis. \n\n\nWeather_Data %>%\n group_by(Location)%>%\n  summarise( total_rain = sum(Rainfall, na.rm = TRUE))%>%\n  arrange(desc(total_rain))%>%\n  slice(1:10)%>%\n  ggplot()+\n  geom_col(aes(x = Location, y =total_rain, fill = Location), show.legend = FALSE )+\n  geom_text(aes(x = Location, y =total_rain, label = total_rain), hjust = 1.1)+\n  theme_classic()+\n  coord_flip()+\n  labs(title = \"Total Amount of Rain\")+\n  ylab(\"Total Rain fall (mm)\")\n\n\n\n\nResults\nIT looks like Caims had the largest amount of Rainfall at 17,157.2 mm. Due to the overlapping x labels, I used coordflip to flip the x and y axis’s. I also wanted to rename the new x axis, and to do that I changed the ylab name. Even though the axis’s are flipped, Location is still seen as the x axis in ggplot.\nExploring\nI have a lot of continuous variables. To get the idea of their layout, lets try using some histograms. To get the most bang for buck, I also want to compare similar variables. Lets look at min and max temp recorded per observation. To make this data a little simpler, we are only going to look at the top 10 cities based on amount of rainfall recorded.To have two variables on one axis, I used the density function as the y variable in the histogram.\n\n\nrainfall_countries <- Weather_Data %>%\n group_by(Location)%>%\n  summarise(total_rain = sum(Rainfall, na.rm = TRUE))%>%\n  arrange(desc(total_rain))%>%\n  slice(1:10)\n\n \ncountryList <- unique(rainfall_countries$Location)\n\n\n\nTop_10 <-Weather_Data %>%\n  filter(Location %in% countryList)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MinTemp, y= ..density.., color = Location) )+\n  annotate(\"text\", x = 3, y =.4, label = \"Min\")+\n  geom_histogram(aes(x = MaxTemp, y = -..density.., fill = Location))+\n  annotate(\"text\", x = 3, y =-.4, label = \"Max\")+\n  xlab(\"Temperature\")+\n  labs(title = \"Max vs Min Temperature\")\n\n\n\nTop_10 %>%\n  ggplot(aes(x = Humidity9am, y =..density..))+\n  geom_freqpoly(aes(color = Location))+\n  annotate(\"text\", x = 15, y = .025, label = \"9AM\")+\n  geom_freqpoly(aes(x = Humidity3pm, y = -..density.., color = Location))+\n  annotate(\"text\", x = 15, y = -.025, label = \"3PM\")+\n  xlab(\"Humidity\")+\n  labs(title = \"9AM vs 3PM Humidity\")\n\n\n\n\nResults\nThe min vs max temps seem to have a normal distribution. It seems the most seen temperature for recorded mins is roughly 22 degrees celsius and 28 degrees celsius for max temp. The colors represent the top 10 cities based on their rainfall. I used two different ways to visualize the cities, it looks like the bottom histogram (Max temp) is a bit easier to visualize the cities. I also used annotate instead of geom_label, since geom_label was taking very long to run.\nThe bottom figure is a histogram using geom_freqpoly. Same idea for this one, I filtered by cities. It’s a nice visualization, though, a bit tough to tell the difference between each city. Mount Ginini has the highest recorded 9AM and 3PM humidity. This could be something to look into.\nBelow I’ve started to play around with Histograms and facet wraps:\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MinTemp))+\n  facet_wrap(~Location)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~Location)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~RainToday)+\n  labs(title = \"Max Temp vs Rain Today\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~RainTomorrow)+\n  labs(title = \"Max Temp vs Rain Tomorrow\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = Humidity9am))+\n  facet_wrap(~RainToday)+\n  labs(title = \"9AM Humidity vs Rain Today\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = Humidity9am))+\n  facet_wrap(~RainTomorrow)+\n  labs(title = \"9AM Humidity vs Rain Tomorrow\")\n\n\n\n\nResults\nThe first two facet wraps (Min and Max Temp vs Location) just give us a little more insight into how the histograms above are compiled. I didn’t find these two charts too helpful. For Max Temp vs Rain Today/Tomorrow figures, I also found these not too helpful in whether predicting there will be rain or no rain.\nThe final two figures, 9AM humidity vs Rain Today/Tomorrow figures did seem to offer a bit of insight. It seems that if we are to expect rain that day or the next day, there needs to be a higher humidity. Days will low humidity in the morning have a higher probability of not raining today or tomorrow.\nFinal Figures\nI kind of feel like I’ve been going deeper and deeper down the rabbit hole. Each chart and figure leads me to a new idea, and is pushing me towards plotting and comparing other variables under different circumstances. I’ve only begun to scratch the surface of what this data set is offering.\nI know believe that humidity is a major factor in predicting rain. So know I will compare temp, humidity and whether it rained today or tomorrow using a facet grid.\nI will also take a closer look into the humidity of 9AM using a violin plot to confirm that Mount Ginini had the highest distribution of high humidity based on the other top 10 cities. \n\n\nTop_10 %>%\nggplot() + \n    geom_smooth(aes(x = Temp3pm, y = Humidity3pm, method = \"lm\", fill = \"red\")) + \n    facet_grid(RainToday ~ RainTomorrow, labeller = label_both)+\n  theme_get()+\n  labs(title = \"Temp and Humidity at 3 PM\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nTop_10 %>%\n  ggplot(aes(x = Location, y = Humidity9am, fill = Location))+\n  coord_flip()+\n  geom_violin()+\n  ylab(\"9AM Humidity\")+\n  labs(title = \"Humidity Distribution by City\")+\n  xlab(\"\")\n\n\n\n\nClosing Remarks\nIt looks like Temp is the lowest when the humidity is the highest. This seems kinda odd to me. There is definitely a higher temperature and humidity when there is rain today or rain tomorrow.\nThe violin plot did confirm that Mount Ginini had an unusual high distribution of humidity compared to the other cities. The violin plot is much easier to understand compared to the histograms and geom_freqpoly figures.\nI’m a bit disappointed by how little I was able to understand this data set. Even with out really understanding this data set, I had a great time learning how to use histograms, freqpoly, facet wraps, facet grid, and violin plots. Compared to other languages I studied, R is definitely the best I used when trying to visualize data!\n\n\n\n",
    "preview": "posts/sullivan-hw4/distill-preview.png",
    "last_modified": "2021-04-07T16:58:11-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/hw-4-weather-data/",
    "title": "HW 4: Weather Data",
    "description": "My homework 4 using weather data and contianing images.",
    "author": [
      {
        "name": "Peter Sullivan",
        "url": {}
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\nData Description\nThis data set was found on Kagle.com. This data has 23 variables and 145,000 measurements. This data set has 10 years of daily weather observations from various locations in Australia. The data was published with the intent of using various weather indicators to predict whether it is raining or will rain the next day.Two columns, rain today and rain tomorrow are used as the target columns. If there was 1mm or more of rain, then that will count as “Yes”, meaning there was rain that day.\nBefore I start plotting, lets take a look at the variables we are working with. To do this, I will use the str function, sapply with sum is.na, and length with unique to count the locations.\n\n\nWeather_Data <- read_csv(\"weatherAUS.csv\", na = c(\"\", \"NA\"))\nknitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)\nstr(Weather_Data)\n\n\nspec_tbl_df [145,460 × 23] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date         : Date[1:145460], format: \"2008-12-01\" ...\n $ Location     : chr [1:145460] \"Albury\" \"Albury\" \"Albury\" \"Albury\" ...\n $ MinTemp      : num [1:145460] 13.4 7.4 12.9 9.2 17.5 14.6 14.3 7.7 9.7 13.1 ...\n $ MaxTemp      : num [1:145460] 22.9 25.1 25.7 28 32.3 29.7 25 26.7 31.9 30.1 ...\n $ Rainfall     : num [1:145460] 0.6 0 0 0 1 0.2 0 0 0 1.4 ...\n $ Evaporation  : logi [1:145460] NA NA NA NA NA NA ...\n $ Sunshine     : logi [1:145460] NA NA NA NA NA NA ...\n $ WindGustDir  : chr [1:145460] \"W\" \"WNW\" \"WSW\" \"NE\" ...\n $ WindGustSpeed: num [1:145460] 44 44 46 24 41 56 50 35 80 28 ...\n $ WindDir9am   : chr [1:145460] \"W\" \"NNW\" \"W\" \"SE\" ...\n $ WindDir3pm   : chr [1:145460] \"WNW\" \"WSW\" \"WSW\" \"E\" ...\n $ WindSpeed9am : num [1:145460] 20 4 19 11 7 19 20 6 7 15 ...\n $ WindSpeed3pm : num [1:145460] 24 22 26 9 20 24 24 17 28 11 ...\n $ Humidity9am  : num [1:145460] 71 44 38 45 82 55 49 48 42 58 ...\n $ Humidity3pm  : num [1:145460] 22 25 30 16 33 23 19 19 9 27 ...\n $ Pressure9am  : num [1:145460] 1008 1011 1008 1018 1011 ...\n $ Pressure3pm  : num [1:145460] 1007 1008 1009 1013 1006 ...\n $ Cloud9am     : num [1:145460] 8 NA NA NA 7 NA 1 NA NA NA ...\n $ Cloud3pm     : num [1:145460] NA NA 2 NA 8 NA NA NA NA NA ...\n $ Temp9am      : num [1:145460] 16.9 17.2 21 18.1 17.8 20.6 18.1 16.3 18.3 20.1 ...\n $ Temp3pm      : num [1:145460] 21.8 24.3 23.2 26.5 29.7 28.9 24.6 25.5 30.2 28.2 ...\n $ RainToday    : chr [1:145460] \"No\" \"No\" \"No\" \"No\" ...\n $ RainTomorrow : chr [1:145460] \"No\" \"No\" \"No\" \"No\" ...\n - attr(*, \"problems\")= tibble [153,782 × 5] (S3: tbl_df/tbl/data.frame)\n  ..$ row     : int [1:153782] 6050 6050 6051 6051 6052 6052 6053 6053 6054 6054 ...\n  ..$ col     : chr [1:153782] \"Evaporation\" \"Sunshine\" \"Evaporation\" \"Sunshine\" ...\n  ..$ expected: chr [1:153782] \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" \"1/0/T/F/TRUE/FALSE\" ...\n  ..$ actual  : chr [1:153782] \"12\" \"12.3\" \"14.8\" \"13\" ...\n  ..$ file    : chr [1:153782] \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" \"'weatherAUS.csv'\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_date(format = \"\"),\n  ..   Location = col_character(),\n  ..   MinTemp = col_double(),\n  ..   MaxTemp = col_double(),\n  ..   Rainfall = col_double(),\n  ..   Evaporation = col_logical(),\n  ..   Sunshine = col_logical(),\n  ..   WindGustDir = col_character(),\n  ..   WindGustSpeed = col_double(),\n  ..   WindDir9am = col_character(),\n  ..   WindDir3pm = col_character(),\n  ..   WindSpeed9am = col_double(),\n  ..   WindSpeed3pm = col_double(),\n  ..   Humidity9am = col_double(),\n  ..   Humidity3pm = col_double(),\n  ..   Pressure9am = col_double(),\n  ..   Pressure3pm = col_double(),\n  ..   Cloud9am = col_double(),\n  ..   Cloud3pm = col_double(),\n  ..   Temp9am = col_double(),\n  ..   Temp3pm = col_double(),\n  ..   RainToday = col_character(),\n  ..   RainTomorrow = col_character()\n  .. )\n\ntable(Weather_Data$Location) %>% sort(decreasing = TRUE)\n\n\n\n        Canberra           Sydney         Adelaide         Brisbane \n            3436             3344             3193             3193 \n          Darwin           Hobart        Melbourne            Perth \n            3193             3193             3193             3193 \n          Albany           Albury     AliceSprings         Ballarat \n            3040             3040             3040             3040 \n         Bendigo           Cairns        GoldCoast       Launceston \n            3040             3040             3040             3040 \n    MountGambier      MountGinini       Townsville       Wollongong \n            3040             3040             3040             3040 \n       Newcastle          Penrith      Tuggeranong    BadgerysCreek \n            3039             3039             3039             3009 \n           Cobar     CoffsHarbour         Dartmoor MelbourneAirport \n            3009             3009             3009             3009 \n         Mildura            Moree    NorfolkIsland        Nuriootpa \n            3009             3009             3009             3009 \n      PearceRAAF     PerthAirport         Portland         Richmond \n            3009             3009             3009             3009 \n            Sale    SydneyAirport       WaggaWagga         Watsonia \n            3009             3009             3009             3009 \n     Williamtown      Witchcliffe          Woomera          Walpole \n            3009             3009             3009             3006 \n       NorahHead       SalmonGums        Katherine             Nhil \n            3004             3001             1578             1578 \n           Uluru \n            1578 \n\nsapply(Weather_Data, function(count) sum(is.na(count)))\n\n\n         Date      Location       MinTemp       MaxTemp      Rainfall \n            0             0          1485          1261          3261 \n  Evaporation      Sunshine   WindGustDir WindGustSpeed    WindDir9am \n       143636        142771         10326         10263         10566 \n   WindDir3pm  WindSpeed9am  WindSpeed3pm   Humidity9am   Humidity3pm \n         4228          1767          3062          2654          4507 \n  Pressure9am   Pressure3pm      Cloud9am      Cloud3pm       Temp9am \n        15065         15028         55888         59358          1767 \n      Temp3pm     RainToday  RainTomorrow \n         3609          3261          3267 \n\nlength(unique(Weather_Data$Location))\n\n\n[1] 49\n\nWeather_Data <- read_csv(\"weatherAUS.csv\", na = c(\"\", \"NA\"))\nknitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)\n\n\n\nResults:\nIt looks like we have a date column, a categorical column for locations, and continuous number type columns. It seems that the spread is pretty even for per location, With the largest amount of observations Canberra at 3436 and the lowest in Katherine, Nhil and Uluru at 1578. There are 49 cites in this data set. Also there are plenty of NA’s in this data set, so I’ll keep that in mind while thinking about which variables will help us predict rainfall in Australia. Due to the large amount of continuous variables, I will use histograms later on in the report.\nBefore we try the histograms, lets plot the top 10 cities by number of observations in a bar chart. \nVisuals\nHere are the top 10 cities based on rainfall: This time I will try to change the data set while piping directly into the plot.\n\n\nWeather_Data %>%\n  count(Location, sort = TRUE)%>%\n  slice(1:10)%>%\n  rename(Total_count = n)%>%\n  ggplot()+\n  geom_col(aes(x = Location, y =Total_count, fill = Location), show.legend = FALSE )+\n  geom_text(aes(x = Location, y =Total_count, label = Total_count), vjust = 3)+\n  theme_classic()+\n  labs(title = \"Rainfall Observations\")\n\n\n\n\nResults\nWell that wasn’t very helpful. Lets get the total rainfall for the top 10 citys! This can be done by using a groupby and arrange by decending. Also it should be noted that when plotting with geo_col, the columns will be alphabetically plotted on the x axis. \n\n\nWeather_Data %>%\n group_by(Location)%>%\n  summarise( total_rain = sum(Rainfall, na.rm = TRUE))%>%\n  arrange(desc(total_rain))%>%\n  slice(1:10)%>%\n  ggplot()+\n  geom_col(aes(x = Location, y =total_rain, fill = Location), show.legend = FALSE )+\n  geom_text(aes(x = Location, y =total_rain, label = total_rain), hjust = 1.1)+\n  theme_classic()+\n  coord_flip()+\n  labs(title = \"Total Amount of Rain\")+\n  ylab(\"Total Rain fall (mm)\")\n\n\n\n\nResults\nIT looks like Caims had the largest amount of Rainfall at 17,157.2 mm. Due to the overlapping x labels, I used coordflip to flip the x and y axis’s. I also wanted to rename the new x axis, and to do that I changed the ylab name. Even though the axis’s are flipped, Location is still seen as the x axis in ggplot.\nExploring\nI have a lot of continuous variables. To get the idea of their layout, lets try using some histograms. To get the most bang for buck, I also want to compare similar variables. Lets look at min and max temp recorded per observation. To make this data a little simpler, we are only going to look at the top 10 cities based on amount of rainfall recorded.To have two variables on one axis, I used the density function as the y variable in the histogram.\n\n\nrainfall_countries <- Weather_Data %>%\n group_by(Location)%>%\n  summarise(total_rain = sum(Rainfall, na.rm = TRUE))%>%\n  arrange(desc(total_rain))%>%\n  slice(1:10)\n\n \ncountryList <- unique(rainfall_countries$Location)\n\n\n\nTop_10 <-Weather_Data %>%\n  filter(Location %in% countryList)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MinTemp, y= ..density.., color = Location) )+\n  annotate(\"text\", x = 3, y =.4, label = \"Min\")+\n  geom_histogram(aes(x = MaxTemp, y = -..density.., fill = Location))+\n  annotate(\"text\", x = 3, y =-.4, label = \"Max\")+\n  xlab(\"Temperature\")+\n  labs(title = \"Max vs Min Temperature\")\n\n\n\nTop_10 %>%\n  ggplot(aes(x = Humidity9am, y =..density..))+\n  geom_freqpoly(aes(color = Location))+\n  annotate(\"text\", x = 15, y = .025, label = \"9AM\")+\n  geom_freqpoly(aes(x = Humidity3pm, y = -..density.., color = Location))+\n  annotate(\"text\", x = 15, y = -.025, label = \"3PM\")+\n  xlab(\"Humidity\")+\n  labs(title = \"9AM vs 3PM Humidity\")\n\n\n\n\nResults\nThe min vs max temps seem to have a normal distribution. It seems the most seen temperature for recorded mins is roughly 22 degrees celsius and 28 degrees celsius for max temp. The colors represent the top 10 cities based on their rainfall. I used two different ways to visualize the cities, it looks like the bottom histogram (Max temp) is a bit easier to visualize the cities. I also used annotate instead of geom_label, since geom_label was taking very long to run.\nThe bottom figure is a histogram using geom_freqpoly. Same idea for this one, I filtered by cities. It’s a nice visualization, though, a bit tough to tell the difference between each city. Mount Ginini has the highest recorded 9AM and 3PM humidity. This could be something to look into.\nBelow I’ve started to play around with Histograms and facet wraps:\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MinTemp))+\n  facet_wrap(~Location)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~Location)\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~RainToday)+\n  labs(title = \"Max Temp vs Rain Today\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = MaxTemp))+\n  facet_wrap(~RainTomorrow)+\n  labs(title = \"Max Temp vs Rain Tomorrow\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = Humidity9am))+\n  facet_wrap(~RainToday)+\n  labs(title = \"9AM Humidity vs Rain Today\")\n\n\n\nTop_10 %>% \n  ggplot()+\n  geom_histogram(aes(x = Humidity9am))+\n  facet_wrap(~RainTomorrow)+\n  labs(title = \"9AM Humidity vs Rain Tomorrow\")\n\n\n\n\nResults\nThe first two facet wraps (Min and Max Temp vs Location) just give us a little more insight into how the histograms above are compiled. I didn’t find these two charts too helpful. For Max Temp vs Rain Today/Tomorrow figures, I also found these not too helpful in whether predicting there will be rain or no rain.\nThe final two figures, 9AM humidity vs Rain Today/Tomorrow figures did seem to offer a bit of insight. It seems that if we are to expect rain that day or the next day, there needs to be a higher humidity. Days will low humidity in the morning have a higher probability of not raining today or tomorrow.\nFinal Figures\nI kind of feel like I’ve been going deeper and deeper down the rabbit hole. Each chart and figure leads me to a new idea, and is pushing me towards plotting and comparing other variables under different circumstances. I’ve only begun to scratch the surface of what this data set is offering.\nI know believe that humidity is a major factor in predicting rain. So know I will compare temp, humidity and whether it rained today or tomorrow using a facet grid.\nI will also take a closer look into the humidity of 9AM using a violin plot to confirm that Mount Ginini had the highest distribution of high humidity based on the other top 10 cities. \n\n\nTop_10 %>%\nggplot() + \n    geom_smooth(aes(x = Temp3pm, y = Humidity3pm, method = \"lm\", fill = \"red\")) + \n    facet_grid(RainToday ~ RainTomorrow, labeller = label_both)+\n  theme_get()+\n  labs(title = \"Temp and Humidity at 3 PM\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nTop_10 %>%\n  ggplot(aes(x = Location, y = Humidity9am, fill = Location))+\n  coord_flip()+\n  geom_violin()+\n  ylab(\"9AM Humidity\")+\n  labs(title = \"Humidity Distribution by City\")+\n  xlab(\"\")\n\n\n\n\nClosing Remarks\nIt looks like Temp is the lowest when the humidity is the highest. This seems kinda odd to me. There is definitely a higher temperature and humidity when there is rain today or rain tomorrow.\nThe violin plot did confirm that Mount Ginini had an unusual high distribution of humidity compared to the other cities. The violin plot is much easier to understand compared to the histograms and geom_freqpoly figures.\nI’m a bit disappointed by how little I was able to understand this data set. Even with out really understanding this data set, I had a great time learning how to use histograms, freqpoly, facet wraps, facet grid, and violin plots. Compared to other languages I studied, R is definitely the best I used when trying to visualize data!\n\n\n\n",
    "preview": "posts/hw-4-weather-data/distill-preview.png",
    "last_modified": "2021-04-07T16:14:01-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-04-02-iris/",
    "title": "iris",
    "description": "The iris dataset",
    "author": [
      {
        "name": "Hans Quiogue",
        "url": {}
      }
    ],
    "date": "2021-04-02",
    "categories": [
      "homework 3",
      "iris",
      "hans quiogue"
    ],
    "contents": "\nHere is the iris dataset\n\n\n\n\n\n\n",
    "preview": "posts/2021-04-02-iris/iris_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-04-03T13:37:53-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-03-31-homework-2/",
    "title": "Homework 2",
    "description": "For the 2nd homework assignment, I reuse the Congressional dataset and plug my work into a markdown file.",
    "author": [
      {
        "name": "Alex Hong",
        "url": {}
      }
    ],
    "date": "2021-03-31",
    "categories": [
      "homework 2",
      "congress",
      "alex hong"
    ],
    "contents": "\nR Markdown\nFor the 2nd homework assignment, I reuse the Congressional dataset and plug my work into a markdown file.\n\n\nlibrary(readr)\nch <- read_csv(\"../DACSS601 Data/congressional_hearings.csv\")\n\n\n\nData Display and Writeup\n\n\n#columns and rows for the dataset\nc_col <- ncol(ch)\nc_row <- nrow(ch)\nyear_obs <- tail(table(ch$year))\na <- knitr::kable(year_obs, col.names = c(\"Year\", \"Frequency\"))\n\n\n\nThe Congressional Hearings dataset contains in existence, all House, Senate, and Joint committees, subcommittees, and select and special committees from 1947 to 2010. For this dataset, the number of variables in the Congressional dataset is 36 and the number of observations in the dataset is 100254.\nThe number of Congressional Hearings for the last five years can be seen below\nYear\nFrequency\n2012\n1206\n2013\n1448\n2014\n1256\n2015\n1421\n2016\n970\n2017\n424\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-02T18:17:09-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-25-student-first-post/",
    "title": "Student first post",
    "description": "Here is a plot I made with mtcars.",
    "author": [
      {
        "name": "John Smith",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "scatterplot"
    ],
    "contents": "\nViola!\n\n\n\n\n\n\n",
    "preview": "posts/2021-03-25-student-first-post/student-first-post_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-04-02T18:17:09-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to DACCS 601",
    "description": "Welcome to our new blog, DACCS 601. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-03-25",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-02T18:17:09-04:00",
    "input_file": {}
  }
]
